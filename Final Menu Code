#include <time.h>
#include <cs50.h>
#include <ctype.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int *readFile(string fileName, int size1, int size2);
int linearSearch(int array[], int guess, int size1);
int binarySearch(int array[], int guess, int size1);
int *bubbleSort(int array[], int size1);
int *selectionSort(int array[], int size1);
void printArray(int array[], int size1);
void printArrayFile(int array[], int size1);
void menu();
int main(void)
{
    int mint;
    int fchecker;
    int *array;
    int size1;
    int size2;
    int guess;
    do
    {
        menu();
        mint = get_int("Your Option ----> ");

        string fileName = ("hello");

        if (mint == 1)
        {
        fileName=get_string("Enter File name ");
        int getsize = get_int("\nHow big is your file: \n 1) 5000 \n 2) 10000 \n 3) 50000 \n Your Choice ----> ");
        if (getsize == 1)
        {
            size1 = 5000;
            size2 = 5;
        }
        if (getsize == 2)
        {
            size1 = 10000;
            size2 = 6;
        }
        if (getsize == 3)
        {
            size1 = 50000;
            size2 = 6;
        }

        FILE* file=(fopen(fileName, "r"));
        char line[size2];
        char options[size1][size2];
        int nums[size1];

        for (int i=0; i < size1; i++)
        {
            fscanf(file, "%s", options[i]);
            nums[i]= atoi(options[i]);
        }

        fclose(file);

        array = nums;

        fchecker = 1;
        }

        if (mint == 2 && fchecker == 1)
        {
            do
            {
                guess = get_int("give me a number in between 1-%i: ", size1);
            } while(guess < 1 || guess > size1);
            int indx = linearSearch(array, guess, size1);
            printf("Your value, %i, is at %i in the file.", guess, indx + 1);
        }
        if (mint == 3 && fchecker == 1)
        {
            do
            {
                guess = get_int("give me a number in between 1-%i: ", size1);
            } while(guess < 1 || guess > size1);

            int indx = binarySearch(array, guess, size1);
            printf("Your value, %i, is at %i in the file.", guess, indx);
        }

        if (mint == 4 && filechecker == 1)
        {
            int *sorted = selectionSort(array, size1);
            int printchoice = get_int("How do you want the file printed: \n 1) Command Terminal \n 2) Seperate Text File \n Your Choice ----> ");
            if (printchoice == 1)
            {
                printArray(array, size1);
            }
            if (printchoice == 2)
            {
                printArrayFile(array, size1);
            }
        }
        if (mint == 5 && fchecker == 1)
        {
            int *sorted = bubbleSort(array, size1);
            int printchoice = get_int("How do you want the file printed: \n 1) Command Terminal \n 2) Seperate Text File \n Your Choice ----> ");
            if (printchoice == 1)
            {
                printArray(array, size1);
            }
            if (printchoice == 2)
            {
                printArrayFile(array, size1);
            }
        }
    } while(mint != 6);
}

int linearSearch(int array[], int guess, int size1)
{
    int i;
    for(i=0; i < size1; i++)
    {
        if (array[i]== guess)
        {
            return i;
        }
    }
    return i;
}

int binarySearch(int array[], int guess, int size1)
{
    int max = 5000;
    int min = 0;
    int mid;

    for (int f = 0; f < 5000; f++)
    {
        mid = (max + min) / 2;

        if (guess == mid)
        {
            return guess;
            break;
        }
        else if (guess > mid)
        {
            min = mid;
        }
        else if (guess < mid)
        {
            max = mid;
        }
    }
    return guess;
}
int *selectionSort(int array[], int size1)
{
    int index;
    for (int i = 0; i < size1; i++)
    {
        int min = size1 + 1;
        for(int j = i; j < size1; j++)
        {
            if (array[j] < min)
            {
                min = array[j];
                index = j;
            }
        }
        int temp = array[i];
        array[i] =  min;
        array[index] = temp;
    }
    return array;
}

int *bubbleSort(int array[], int size1)
{

for (int loop = 0; loop < size1 - 1; loop++) {
    for (int i = 0; i < size1 - loop - 1; ++i) {
      if (array[i] > array[i + 1]) {

        int temp = array[i];
        array[i] = array[i + 1];
        array[i + 1] = temp;
      }
    }
  }
  return array;
}

void printArray(int array[], int size1)
{
    for (int i= 0; i < size1; i++)
    {
        printf("%i\n", array[i]);
}

void printArrayFile(int array[], int size1)
{
    string sortedfileName=get_string("Enter File name for sorted array to be placed in: ");
    FILE* fp = fopen(sortedfileName, "w");
    for (int i= 0; i < size1; i++)
    {
        fprintf(fp, "%d", array[i]);
        fprintf(fp, "\n"); 
    }
    fclose(fp);
}

void menu()
{
    printf("\n \n \nMenu\n------------------------\n");
    printf("Options\n---------------------\n");
    printf("1) Read a File\n");
    printf("2) Find a value in Linear\n");
    printf("3) Find a value in Binary\n");
    printf("4) Sort a file in Selection\n");
    printf("5) Sort a file in Bubble\n");
    printf("6) Exit\n");
}
